newthings: https://medium.com/@gitship/15-git-hacks-to-save-your-life-as-a-developer-aa8808846dbb#:~:text=To%20exit%20git%20log%2C%20type,q%E2%80%9D%20or%20%E2%80%9Cz%E2%80%9D.
log formats: https://git-scm.com/docs/pretty-formats


Git has 3 stage architecture:
-working directory-->staging area-->repository(head)

Working Directory – files in a current local directory that you are working on. if the data is in the working tree and not moved to the staging area, we get the files in red color when we search with the command git status, data will be in red color
if the file is modified and yet to be moved to the staging area.
Staging Area (aka. cache, index) – is a temporary area where you add files with the git add command. The files that are yet to be committed to the remote repository will be present here.
the data will be in green color if it is in the staging area and yet to be committed.

local repository: Local repositories reside on the computers of team members. all the project code is present locally in the system of all the team members in the local repository.
remote repository: the repository which is repository hosted on the internet.
master branch: by default, there is a single branch called the master branch, if you don't create a branch and commit, then all the commits will be a part of the master branch.

 branches:
 A branch is a version of your repository, or in other words, an independent line of development. 
All commits belong to a branch by default it is a local branch. a branch is easy to create and it enables experimentation. 
if you have an idea for a change, then you can test your idea by creating a new branch.
Types of branches:
Topic: a feature, a bug fix, a hotfix, a configuration change, etc.
Long-lived: master, develop, release, etc.

git branch: can be used to check the branches used and the one in the green color is the present branch in use.
 we can check the available branches(branch label references) in .git/refs/heads folder

git tag:
A tag is a reference label attached to a specific commit in the local repository.
we can assign a tag to a particular commit. 
create an annotated tag by specifying the -a option to specify a tag message use -m.
git tag -a -m "message" v0.1

check the present tags using "git tag" you will see v0.1
use git show v0.1 to see tag information
git push origin v0.1: to push the tag to the remote repository.
git tag -a -m "just a temp tag" temp Head~: to teg the parent of the current commit with a temp tag
git tag -d tag name: to delete a certain tag 
 

Git graphs:
graphs contain nodes connected with lines, lines are technically known as edges.
A directed graph means nodes are connected with arrows, which means nodes are connected in a certain direction.
Git has a directed acyclic graph, they cannot start and end at the same node.
each node represents a commit or version of code or project.
example:
a->b->c
graph starts with a and ends with c

If a node is connected to two nodes using arrows pointing to the left means they are the parents of the node.
if two nodes are connected to a single node using arrows pointing to the left means both nodes have one parent.

Git Ids:
git ids are also called git objects, they are 40-character hexadecimal strings, and git ids are secure hash 1(SHA-1) values.
git ids are unique for each content in a file. if the contents are the same then the git id will be the same.
git log is used to get git Id for all the commits.
git log --oneline gives short ID for each git id which is usually the first few characters of the git id.
git show first 3 charecters of git id can be used to filter the required commit.

git reference:
if a reference points to another reference it is called a symbolic reference.
other than git ids we can also use these references to get information about the commits.
when you check git log we get git id and two references(HEAD -> master) 
head reference points out to the most recent commit

branch label:
A branch label points to the most recent commit, it is also called the tip of the branch.


.git:
.git stores all the information about the version control

pwd:
pwd is used to know the present working directory

ls:
ls is used to list the contents of the directory

git status:
git status is used to check the status of the present directory whether the present directory is a repo or not.

git init:
 it is used to create a new repository in the present directory, it will be tracked by git.

how to delete the present folder as a repo?
 rm -f .git will remove the present directory as a repo and the folder will not be tracked anymore. it means the present directory is not a git repo, it is just a normal folder now.


git add:
 git add is used for two purposes:
  git add --a filename is used to add untracked files or newly added files into the staging area.
  git add filename is used to turn a modified filintoto unmodified version in other words this command will help the modified file to send the changes to init to the staging area.
git add .,git add *,git add -A, any one can be used to add all the files from the current working tree to the staging area.


git commit:
 git commit is used to add the content in the staging area to the local repository as a commit.
 Commits are created with the git commit command to capture the state of a project at that point in time.
 The git commit command captures a snapshot of the project's currently staged changes. Committed snapshots 
 can be thought of as “safe” versions of a project—Git will never change them unless you explicitly ask it to.
 git commit -m "message" is used to commit with a message.
 if you use only git commit and enter then you will have to give a message there in a few steps:
  step-1 press i
  step-2 write the message and then press escape
  step-3 write :wq and press enter this will let u come out of commit


git log:
 git log is used to see all the history of commits that we did.

git log --oneline:
git log --oneline -1 used to see the latest commit
git log --oneline -3 is used to see the latest 3 commits
git log --oneline --graph is used to display the git graph and the commits with their shortids.

how to check for all the commits in origin/master?
git log origin/master --oneline




git clone:
suppose you don't have data or files related to a certain project stored locally on your computer but are present in GitHub, you can copy the data locally from GitHub/bitbucket using 
git clone.
git clone "link of git repo" is used to get all the contents from the link and will be downloaded into the present folder.

git remote:
git remote is used to connect the local repository to the remote repository
if you connecting for the first time then:
	git remote add origin https://github.com/username/remote-repository.git
if you are connecting to another repo or doing for other than the first time or if you get any error like git-error-fatal-remote-origin-already-exists:
	git remote set-url origin git@github.com:username/remote-repository.git
git remote: if a default remote repo is connected we get that name.
git remote -v is used to get information that the local repository has an association with the remote repository

git push:
The push term refers to uploading local repository content to a remote repository. 
Pushing is an act of transferring commits from your local repository to a remote repository. Pushing is capable of overwriting changes; caution should be taken when pushing.
 If we do not specify the location of a repository, then it will push to the default location at the origin master.
when we are pushing the first time:
git push -u origin master   #u flag is used to set up a tracking relationship between local and remote branches.
Git Push Origin Master:
Generally, the term origin stands for the remote repository, and master is considered the main branch. 
So, the entire statement "git push origin master" pushed the local content on the master branch of the remote location.

when does git push fail?
when someone has made changes to the remote repository after you cloned.
and now you are trying to push your code to that repository which is updated.
git push will fail as the previous version of your local is not the same as the remote repository.
before pushing you must pull or fetch.

Delete a Remote Branch:
We can delete a remote branch using git push. It allows removing a remote branch from the command line. To delete a remote branch, perform below command:
git push origin -delete edited
the git push origin command is used with -delete option to delete a remote branch. I have deleted my remote branch edited from the repository.


git branch:
git branch branch-name: creates a new branch, it just creates a branch label, still, we remain in the present branch but not the newly created branch
git branch: shows the list of all the available branches.
git branch -d featureX: deletes featureX branch(shouldn't delete a branch until it is committed to another branch or master branch).
git branch -D featureX: deletes unmerged branches. the output will be like "deleted branch featureX".
git branch --all: displays tracking and local branch names.

how can you create a branch and directly switch to it in one command?
git checkout -b branchname

git reflog:
suppose you have deleted a branch by mistake and you left some dangling commits, you can use the command git reflog.
 

git checkout:
git checkout branch-name: shifts the present branch to the branch name specified. and also head will be pointing to the branch name specified.
git checkout -b deleted branch name SHA-1: recreates a new branch with the information of deleted branch.
git checkout Head~: points to the parent of the present commit.

git show:
git show ^: shows the first parent of the recent commit
git show 2^: shows the second parent of the recent commit
git show ^^: shows the first parent of the first parent or the grandparent.
git show HEAD~: shows the parent of the latest commit.

git amend:
if you want to change the message in the present commit you can use git amend.
git commit helps us change the message but SHA-1 will be changed.


Git set-upstream:
Like the literal meaning, upstream refers to something which points to where it originated from.

In the git world, upstream refers to the original repo or a branch. For example, when you clone from Github, the remote Github repo is upstream for the cloned local copy.
The git set-upstream allows you to set the default remote branch for your current local branch. By default, every pull command sets the master as your default remote branch.

To push the changes to remote server and set the particular branch as default remote branch for the local repository. To push the changes and set the remote branch as default, 
run the below command:

$ git push --set-upstream origin master  

We can also set the default remote branch by using the git branch command. To do so, run the below command:

$ git branch --set-upstream-to origin master  


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
git merge:
 merging takes the contents of a source branch and integrates them with a target branch. In this process, only the target branch is changed. The source branch history remains the same.
A merge occurs when a commit has more than two parents. merge refers to combining the work of two branches. merging usually happens between a topic branch and base branch.
topic branch means a branch used for experimentation. base branch could be a master branch.
prior to the merge, the master branch will not have any idea about the other branches.
lets say we have two branches master and featureX, master branch has commit A, featureX branch has commit B, after the merge commit, the work in featureX will be included in master branch,
 and commit B is a part of the featureX branch, and the master branch.
To make merging easier, avoid making a lot of changes over a long period of time without merging. smaller frequent mergers are usually the best approach.
it is better to create many small merge problems than one giant merge problem.


Types of merges:
Fast-forward merge
merge commit
squash merge
rebase 

Fast-forward merge:
If we update the code in the new branch created and commit B and no new commits were made to the base branch which has only commit A since our new branch was created.
 when we try to merge the new branch with the base branch, Git can do something called a “Fast Forward Merge”.
After the merge, the new branch and the master branch consist of the same commits. now the master label is present at commit B which is the latest commit that was initially at A.
Note: if any new commit is added to the base branch after the new branch has been updated and committed then git doesn't allow fast-forward merge.
steps:
git checkout -b branch-name
change the data of a file in the new branch
git add filename
git commit -m "commit message"
git checkout master branch
git merge branch name

Advantages:
it is simpler.
Keeps a very clean commit history
Allows us to see each commit that made up the eventually merged changes, with no loss of granularity.

Disadvantages:

Can only be done when the base branch hasn’t had any new commits, a rarity in a shared repository
Can be seen as an inaccurate view of history as it hasn’t captured that a branch was created, or when it was merged.

Merge commit(Recursive merge):
`````````````````````````````````
In Recursive merge, after you branch and make some commits, there are some new original commits on the ‘master‘. 
So, when it’s time to merge, git recurses over the branch and creates a new merge commit. The merge commit continues to have two parents.
merge commits can also be used inplace of fast forward merge eventhough there is nothing created in the master branch after the new branch is created.
it is preferred because it creates a new node and helps in understanding the commits better.
syntax: git merge--no-ff

Advantages:

Most descriptive and verbose history, tells us exactly when things happened, helps give the best context about code changes
Allows us to see a graph of when branches were made using git log --oneline --graph which can help understand why changes were made and when
Allows us to see each commit that made up the eventually merged changes, no loss of granularity
Disadvantages:

Merge commits are often seen as messy as they are empty and only really there for historical reasons. Can be especially confusing if you are trying to revert a set of changes.
Can end up having a complex graph of previous branches that’s more difficult to read
-------------------------------------------------------------------------------------------------------------------------------------------
Git merge conflicts:
```````````````````````
when we have two branches and data is changed in the same file in the two branches.
when we try to merge the one branch to another then merge conflicts occur.
when different files are changed in each branch then no merge conflict occurs.

how git merge confict arises?
for example we have two branches master, featurex. both have the same version of code.
in feature x we change the first two lines of code for fileA.py,add,commit.
then checkout to master branch and here also we try to change the first two two lines of code for fileA.py,git add,git commit.
when you merge featurex from master branch you get git merge conflict.
Text from the HEAD commit is between <<<<<<<< and ======
Text from the branch to be merged is between ====== and >>>>>>>>>>>

open the file you can see both versions change as per requirement.

then from master branch git add,git commit.

how to abort merge?
git merge --abort

--------------------------------------------------------------------------------------------------------------------------------------------------
git fetch:
git fetch really only downloads new data from a remote repository - but it doesn't integrate any of this new data into your working files. 
Fetch is great for getting a fresh view on all the things that happened in a remote repository.

git pull:
git pull is a combination of git fetch and git merge.
git pull, in contrast, is used with a different goal in mind: to update your current HEAD branch with the latest changes from the remote server. 
This means that pull not only downloads new data; it also directly integrates it into your current working copy files. 
This has a couple of consequences:

Since "git pull" tries to merge remote changes with your local ones, a so-called "merge conflict" can occur.

git pull also has verious merges such as fast forward, merge commit.

git pull merging options:
--ff: this is the default pull which is fast forward merge, otherwise we perform a merge commit.
--no--ff: always performs a merge commit.
--ff--only: cancel instead of doing a merge commit.
--rebase:

fast forward:
suppose we clone the remote repository at that time it has two commit a and b.
after some time the remote repo is updated and also has commit c.
now when we try to pull the data from remote repository it performs fast forward merge.


merge commit:
1.initially you have commits a and b in remote and local repo.
2. you make some commit c in local repo.
3. At the sametime someone changes in the remote repo.
4. now you want to pull the data from remote repo.
5. this will result in merge commit.(if the changes are made at different places in both the repos)

---------------------------------------------------------------------------------------------------------------------------------------------
Git rebase:
A git rebase is similar to the git merge. Rebase is another way to integrate changes from one branch to another.
Rebase compresses all the changes into a single “patch.” Then it integrates the patch onto the target branch.
when you use git merge and check the history, it clearly shows that from branch we have merged the data.
but when we use git rebase we cannot see the commit history clearly. the merging is linear.
Unlike merging, rebasing flattens the history because it transfers the completed work from one branch to another. In the process, unwanted history is eliminated.

example:
initially we have two branches x and y.
for both the branches b is the parent.
we have c commit for x branch and d for y branch 
when you use merge we can see merge happens but it also shows b as the parent for commits c and d.
when you use rebase, commit history will be a->b->c->d after rebase commit d parent is c not b anymore.

rebase are of two types:
1. rebase
2. interactive rebase



git interactive rebase:
This allows altering the commits as they are moved to the new branch. This is more powerful than automated rebase, as it offers complete control over the branch’s commit history. 
Typically this is used to clean up a messy history before merging a feature branch into master.
https://www.freecodecamp.org/news/an-introduction-to-git-merge-and-rebase-what-they-are-and-how-to-use-them-131b863785f/

----------------------------------------------------------------------------------------------------------------------------------------------------
git pull requests:
when a developer makes some changes to the code from a branch say featurex and he wants that changes to be reviewed by the person who maintains the remote repo and merge the changes.
to do that he will raise a pull request. then the reviewer will review changes and merge the pull request.

steps:
clone the master
create a new branch
in the new branch change some code in the files.
push the files from the new branch as origin.
now create a pull request.

https://www.youtube.com/watch?v=aFjdZZUN4L0
-----------------------------------------------------------------------------------------------------------------------------------

Dangling commits:
branch labels are commonly deleted after a topic branch has been merged. if you delete a branch without merging you will be left with a dangling commit that does not belong to any branch.
let's say you are trying to delete a branch called featureX on which you worked and created a commit D that commits to commit C of the master branch and commit D only belongs to the 
featureX branch, if you delete featureX then git won't let you do that.



.gitignore:
 The .gitignore file is a text file that tells Git which files or folders to ignore in a project.
 A local .gitignore file is usually placed in the root directory of a project. 
 You can also create a global .gitignore file and any entries in that file will be ignored in all of your Git repositories.
 we can create .gitignore in the present directory by using touch .gitignore
 suppose you have a file name  error.log which shouldn't be tracked add error.log to the .gitignore file and that file won't be tracked.
 this will work only if it isn't tracked earlier or if the file is new and hasn't been sent to the staging area.
 if u have a file that is tracked already and now u decided that it shouldn't be tracked
 suppose you have a directory with the name dir that shouldn't be tracked add dir/ to the .gitignore file and that folder won't be tracked.
 suppose in  dir you only want dir to be untracked and you want its sub dir to be tracked then use \dir\  to the .gitignore file and
 that folder won't be tracked
 To create a local .gitignore file, create a text file and name it .gitignore (remember to include the . at the beginning). 2
 Then edit this file as needed. Each new line should list an additional file or folder that you want Git to ignore.

 The entries in this file can also follow a matching pattern.

 	* is used as a wildcard match.
	 / is used to ignore pathnames relative to the .gitignore file.
	 # is used to add comments to a .gitignore file.
suppose we have done changes in a file and loaded them to the staging area using git add --a then before committing if we again did some changes
in the same file.
after doing the changes again and checking the git status we can see the same file in the modified as well as the staging area.
the staging area consists of the previous version data.
the modified consists of the new version file.


git diff:
used to compare the staging area and the present working dir files.
if you do changes in the file after sending it to the staging area then git diff will show two versions 
if both files have some changed data then it will show both versions.


HEAD – is a reference to a specific commit (normally to the last commit in a local repository).

git diff Shows the changes between the Working Directory and the Staging Area.
git diff --staged Shows the changes between the Staging Area and the HEAD(the data with the last commit).
git diff head Shows all the changes between the Working Directory and the HEAD

git add -a -m "commit by skipping staging area:
  this command is used to commit the tracked files by skipping the staging area.
  we cannot use this command on untracked files means we can use this on the files which are being tracked or sent to staging are earlier.

git rm filename:

 used to remove a file from the folder.

git mv oldfilename newfilename:
 used to rename the oldfilename with new name
 the command not only renames but also moves to staging area.

git rm --cached filename:
 this command is used to remove the file name from being tracked and eventually it will be removed from staging area and will not be tracked anymore.

git log --stat:
 helps u see all the logs in a easy and short way.
 to come out of git log press q or z.

git log --pretty=oneline:
 this helps you see the info about all the commits in one one line

git log --pretty=short:
 this also helps to see the info of each commit in short notes.it gives hash+authorname+title.

git log --pretty=medium:
 this also helps to see the info of each commit in short notes.it gives hash+authorname+date+title.

git log --pretty=full:
 if you want some more info than we get when used short use the above command. it gives hash+authorname+who commited+title.

git log --since=2.days:(or 2.years or anything)
 gives you commit info which you did in last two days

git log -p:
 will help u see the difference in all the individual commits

git log -p -3:
 this will show you difference in last 3 commits 

git log --pretty=format:"%h -- %an":
 will give you the commit unique codes(hash)+ author name

git log --pretty=format:"%h -- %ae":
 will give you the commit unique codes(hash)+ author email

git commit --amend:
 used to change the commit message.
 After writing commit message, just press Esc Button and then write :wq or :wq! and then Enter to close the unix file.
 You can also add the commit message from the command line.
 
git restore --staged filename:
 this is used to unstage a file which is already sent for staging area and is ready to commit.

git checkout -- filename:
 is used to get the data of a file which was updated in last commit.
 in other words the file will be updated with the data with which we commited recently.
 this can be used on all files except .gitignore

git checkout -f:
 is used to get the previous versions from the last commit for the files which we updated from the last commit.
-----------------------------------------------------------------------------------------------------------------------------
how to create a new repo?
"create repo in the directory where your project files are present."
git init reponame

how to create a new file from command line?
touch filename

how to create a new directory from command line?
mkdir dirname

how to delete a empty directory?
rmdir dirname

how to delete a non-empty directory?
rm -rf dirname

how to add files to staging area?
git add filename

how to commit files to local repository?
git commit -m "message"

how to check all the commits made?
git log

how to check the recent 4 commits?
git log --oneline -4

how to edit file in linux?
vi filename
press i
change the data 
press esc then :wq and enter.


how to check status?
git status

how to check files in the directory?
ls

how to connect and push the code to remote repository on gitbash?
if you connecting for first time then:
	git remote add origin https://github.com/username/remote-repository.git
if you are connecting to another repo or doing for other than first time or if you get any error like git-error-fatal-remote-origin-already-exists:
	git remote set-url origin git@github.com:username/remote-repository.git

How to confirm remote branch? 
	git remote -v

push code to remote repository using below command:
	git push -u origin master #-u means upstream(track this branch)

how to check present branch?
git branch

how to create a new branch?
git branch branchname

how to create a new branch and checkout directly into that branch?
git checkout -b newbranchname

how to change the branch?
git checkout branchname

how to rename an existing current branch?
git remote -m newbranchname

how to delete a branch?
git branch -d branchname

how to force delete a branch even if not committed or merged to another branch?
git branch -D branchname

how to show all the branches?
git branch --all

how to check commits into remote repository?
git log master 



how to add all files from working directory to 
git add .,git add *,git add -A, any one can be used to add all the files from the current working tree to the staging area.

how to change the remote url in git?
git remote set-url origin https://github.com/sheshankcool/demo1.git

how to check for available remote repositories?
git branch --remotes

how to check parents of latest commit?
git show HEAD~

how to track a remote branch from the new branch which you created?
git branch --set-upstream-to origin/master
			or 
git branch -u remotebranchname

how to check all the commits into the remote branch?
git log origin/master --oneline


how to download the documents from remote repository?
git clone "link of git repo" is used to get all the contents from the link and will be downloaded into the present folder.

how to merge when you created a new branch and updated the code and no changes were made in master branch in this time period?
fast forward merge is used for this situation.

steps:
git checkout -b branch-name
change the data of a file in the new branch
git add filename
git commit -m "commit message"
git checkout master branch
git merge branch name

how to merge branch2 into branch1?
git checkout branch1
git merge branch2
	or 
git merge branch2 branch1

how to merge featurex into master branch?
git checkout master
git merge featurex
	OR 
git merge featurex master
	

how to check all the previous commits from various branches?
git log --oneline --graph 
------------------------------------------------------------------------------------------------------------------------------
what is meant by SSH key?
An SSH key is an access credential for the SSH (secure shell) network protocol.
This authenticated and encrypted secure network protocol is used for remote communication between machines on an unsecured open network. 
SSH is used for remote file transfer, network management, and remote operating system access.

An SSH key is an alternate way to identify yourself that doesn't require you to enter you username and password every time.
SSH keys come in pairs, a public key that gets shared with services like GitHub, and a private key that is stored only on your computer. 
If the keys match, you're granted access.
-----------------------------------------------------------------------------------------------------------------------------------------------

how to generate SSH key?
- ssh-keygen -t rsa -b 4096 -C "your_email@example.com"      press enter for all 
- eval `ssh-agent -s`
- ssh-add ~/.ssh/id_rsa
- clip < ~/.ssh/id_rsa.pub
- after entering the above link google tab and press ctrl+v you will recieve a link copy that.
- goto github settings select ssh key and click on new and paste the link.
- the will be created successfully and now you can easily push the code to github from terminal.
------------------------------------------------------------------------------------------------------------------------------------------------

Let say, after making a commit you realize that you need to make some further changes in FileB.txt . 
In that case instead of making a new commit after changing FileB.txt you can use the — amend flag to update the previous commit like following
 -git commit --amend
-----------------------------------------------------------------------------------------------------------------------------------------------

suppose if u push  files to a different branch in github other than main branch and the files are not in the main branch
After pushing the files to the other branch when u open github you will get below  error

"There isn't anything to compare. Nothing to compare, branches are entirely different commit histories"

we use git branches to create other versions of same files and if we want to use this in main version we can merge and use it 
but here the file is different that is why we are getting the error and we cannot pull the request as well.

solution:
For the new "main" branch as default, you can do this way:
git checkout master   
git branch main master -f    
git checkout main  
git push origin main -f

link:https://stackoverflow.com/questions/23344320/there-isnt-anything-to-compare-nothing-to-compare-branches-are-entirely-diffe

------------------------------------------------------------------------------------

















































































































https://towardsdatascience.com/logit-of-logistic-regression-understanding-the-fundamentals-f384152a33d1
https://analyticsindiamag.com/7-types-classification-algorithms/
https://www.analyticsvidhya.com/blog/2020/10/how-to-choose-evaluation-metrics-for-classification-model/
https://towardsdatascience.com/common-loss-functions-in-machine-learning-46af0ffc4d23
https://medium.com/@lachlanmiller_52885/understanding-and-calculating-the-cost-function-for-linear-regression-39b8a3519fcb
https://www.javatpoint.com/linear-regression-vs-logistic-regression-in-machine-learning
https://towardsdatascience.com/understanding-logistic-regression-9b02c2aec102#:~:text=Logistic%20Regression%20is%20one%20of,in%20this%20method%20of%20classification.
https://heartbeat.fritz.ai/introduction-to-machine-learning-model-evaluation-fa859e1b2d7f#:~:text=Model%20evaluation%20aims%20to%20estimate,model)%20to%20evaluate%20model%20performance.
https://dataaspirant.com/word-embedding-techniques-nlp/
https://towardsdatascience.com/support-vector-machine-python-example-d67d9b63f1c8


resume worded
jobscan
jobscore
bamboohr
smartrecruiter
